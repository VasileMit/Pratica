
Button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000220  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000220  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800074  00800074  000002c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a1  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a9  00000000  00000000  00000a05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fa  00000000  00000000  00000fae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  000012a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000332  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f5  00000000  00000000  00001646  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000173b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	6b c0       	rjmp	.+214    	; 0xea <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e2       	ldi	r30, 0x20	; 32
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 37       	cpi	r26, 0x74	; 116
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a4 e7       	ldi	r26, 0x74	; 116
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ad 37       	cpi	r26, 0x7D	; 125
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	92 d0       	rcall	.+292    	; 0x17e <main>
  5a:	e0 c0       	rjmp	.+448    	; 0x21c <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <vse_numere>:
unsigned int r = 0;
unsigned int razr1=0,razr2=0,razr3=0;
unsigned char  bc547=0;
void vse_numere (unsigned int rasbivca_go)

{
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	ac 01       	movw	r20, r24
	
	razr1=rasbivca_go/100;
  64:	ec 01       	movw	r28, r24
  66:	d6 95       	lsr	r29
  68:	c7 95       	ror	r28
  6a:	d6 95       	lsr	r29
  6c:	c7 95       	ror	r28
  6e:	9e 01       	movw	r18, r28
  70:	ab e7       	ldi	r26, 0x7B	; 123
  72:	b4 e1       	ldi	r27, 0x14	; 20
  74:	c7 d0       	rcall	.+398    	; 0x204 <__umulhisi3>
  76:	fc 01       	movw	r30, r24
  78:	f6 95       	lsr	r31
  7a:	e7 95       	ror	r30
  7c:	f0 93 7a 00 	sts	0x007A, r31	; 0x80007a <razr1+0x1>
  80:	e0 93 79 00 	sts	0x0079, r30	; 0x800079 <razr1>
	razr2=rasbivca_go%100/10;
  84:	24 e6       	ldi	r18, 0x64	; 100
  86:	2e 9f       	mul	r18, r30
  88:	c0 01       	movw	r24, r0
  8a:	2f 9f       	mul	r18, r31
  8c:	90 0d       	add	r25, r0
  8e:	11 24       	eor	r1, r1
  90:	9a 01       	movw	r18, r20
  92:	28 1b       	sub	r18, r24
  94:	39 0b       	sbc	r19, r25
  96:	ad ec       	ldi	r26, 0xCD	; 205
  98:	bc ec       	ldi	r27, 0xCC	; 204
  9a:	b4 d0       	rcall	.+360    	; 0x204 <__umulhisi3>
  9c:	96 95       	lsr	r25
  9e:	87 95       	ror	r24
  a0:	96 95       	lsr	r25
  a2:	87 95       	ror	r24
  a4:	96 95       	lsr	r25
  a6:	87 95       	ror	r24
  a8:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <razr2+0x1>
  ac:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <razr2>
	razr3=rasbivca_go%10;
  b0:	9a 01       	movw	r18, r20
  b2:	a8 d0       	rcall	.+336    	; 0x204 <__umulhisi3>
  b4:	96 95       	lsr	r25
  b6:	87 95       	ror	r24
  b8:	96 95       	lsr	r25
  ba:	87 95       	ror	r24
  bc:	96 95       	lsr	r25
  be:	87 95       	ror	r24
  c0:	9c 01       	movw	r18, r24
  c2:	22 0f       	add	r18, r18
  c4:	33 1f       	adc	r19, r19
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	82 0f       	add	r24, r18
  d4:	93 1f       	adc	r25, r19
  d6:	9a 01       	movw	r18, r20
  d8:	28 1b       	sub	r18, r24
  da:	39 0b       	sbc	r19, r25
  dc:	30 93 76 00 	sts	0x0076, r19	; 0x800076 <razr3+0x1>
  e0:	20 93 75 00 	sts	0x0075, r18	; 0x800075 <razr3>
}
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <__vector_9>:

ISR (TIMER0_OVF_vect)
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
	if(bc547==1){PORTB=0xE;PORTD=go[razr1];}
  fa:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	61 f4       	brne	.+24     	; 0x11a <__vector_9+0x30>
 102:	8e e0       	ldi	r24, 0x0E	; 14
 104:	88 bb       	out	0x18, r24	; 24
 106:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <razr1>
 10a:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <razr1+0x1>
 10e:	ee 0f       	add	r30, r30
 110:	ff 1f       	adc	r31, r31
 112:	e0 5a       	subi	r30, 0xA0	; 160
 114:	ff 4f       	sbci	r31, 0xFF	; 255
 116:	80 81       	ld	r24, Z
 118:	82 bb       	out	0x12, r24	; 18
	if(bc547==2){PORTB=0xD;PORTD=go[razr2];}
 11a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 11e:	82 30       	cpi	r24, 0x02	; 2
 120:	61 f4       	brne	.+24     	; 0x13a <__vector_9+0x50>
 122:	8d e0       	ldi	r24, 0x0D	; 13
 124:	88 bb       	out	0x18, r24	; 24
 126:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <razr2>
 12a:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <razr2+0x1>
 12e:	ee 0f       	add	r30, r30
 130:	ff 1f       	adc	r31, r31
 132:	e0 5a       	subi	r30, 0xA0	; 160
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	80 81       	ld	r24, Z
 138:	82 bb       	out	0x12, r24	; 18
	if(bc547==3){PORTB=0xB;PORTD=go[razr3];}
 13a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 13e:	83 30       	cpi	r24, 0x03	; 3
 140:	61 f4       	brne	.+24     	; 0x15a <__vector_9+0x70>
 142:	8b e0       	ldi	r24, 0x0B	; 11
 144:	88 bb       	out	0x18, r24	; 24
 146:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <razr3>
 14a:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <razr3+0x1>
 14e:	ee 0f       	add	r30, r30
 150:	ff 1f       	adc	r31, r31
 152:	e0 5a       	subi	r30, 0xA0	; 160
 154:	ff 4f       	sbci	r31, 0xFF	; 255
 156:	80 81       	ld	r24, Z
 158:	82 bb       	out	0x12, r24	; 18
	

		bc547++;
 15a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 15e:	8f 5f       	subi	r24, 0xFF	; 255
 160:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
		if(bc547>3) bc547=1;
 164:	84 30       	cpi	r24, 0x04	; 4
 166:	18 f0       	brcs	.+6      	; 0x16e <__vector_9+0x84>
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
}
 16e:	ff 91       	pop	r31
 170:	ef 91       	pop	r30
 172:	8f 91       	pop	r24
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <main>:

int main(void)
{   DDRD=0xFF;
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	81 bb       	out	0x11, r24	; 17
	DDRB=0x07;
 182:	87 e0       	ldi	r24, 0x07	; 7
 184:	87 bb       	out	0x17, r24	; 23
	
	DDRC&=~((1<<4)|(1<<5));
 186:	84 b3       	in	r24, 0x14	; 20
 188:	8f 7c       	andi	r24, 0xCF	; 207
 18a:	84 bb       	out	0x14, r24	; 20
	
	PORTC|=(1<<4)|(1<<5);
 18c:	85 b3       	in	r24, 0x15	; 21
 18e:	80 63       	ori	r24, 0x30	; 48
 190:	85 bb       	out	0x15, r24	; 21
	//PORTB=0x1;
	//PORTD=0x3F;
	
	TCCR0 |=(1<<1);TCCR0&=~((1<<0)|(1<<2));
 192:	83 b7       	in	r24, 0x33	; 51
 194:	82 60       	ori	r24, 0x02	; 2
 196:	83 bf       	out	0x33, r24	; 51
 198:	83 b7       	in	r24, 0x33	; 51
 19a:	8a 7f       	andi	r24, 0xFA	; 250
 19c:	83 bf       	out	0x33, r24	; 51
	TIMSK |=(1<<0);
 19e:	89 b7       	in	r24, 0x39	; 57
 1a0:	81 60       	ori	r24, 0x01	; 1
 1a2:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0;
 1a4:	12 be       	out	0x32, r1	; 50
	sei ();
 1a6:	78 94       	sei



	while(1)
	{
		vse_numere(r);
 1a8:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <r>
 1ac:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <r+0x1>
 1b0:	56 df       	rcall	.-340    	; 0x5e <vse_numere>
		
		if(~PINC&(1<<5))
 1b2:	9d 99       	sbic	0x13, 5	; 19
 1b4:	12 c0       	rjmp	.+36     	; 0x1da <main+0x5c>
		{
			r++;
 1b6:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <r>
 1ba:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <r+0x1>
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <r+0x1>
 1c4:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <r>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c8:	2f e5       	ldi	r18, 0x5F	; 95
 1ca:	8a ee       	ldi	r24, 0xEA	; 234
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	21 50       	subi	r18, 0x01	; 1
 1d0:	80 40       	sbci	r24, 0x00	; 0
 1d2:	90 40       	sbci	r25, 0x00	; 0
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <main+0x50>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <main+0x5a>
 1d8:	00 00       	nop
			_delay_ms(300);
			
		}
		if(~PINC&(1<<4))
 1da:	9c 99       	sbic	0x13, 4	; 19
 1dc:	e5 cf       	rjmp	.-54     	; 0x1a8 <main+0x2a>
		{
			r--;
 1de:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <r>
 1e2:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <r+0x1>
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <r+0x1>
 1ec:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <r>
 1f0:	2f e5       	ldi	r18, 0x5F	; 95
 1f2:	8a ee       	ldi	r24, 0xEA	; 234
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	21 50       	subi	r18, 0x01	; 1
 1f8:	80 40       	sbci	r24, 0x00	; 0
 1fa:	90 40       	sbci	r25, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <main+0x78>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <__EEPROM_REGION_LENGTH__>
 200:	00 00       	nop
 202:	d2 cf       	rjmp	.-92     	; 0x1a8 <main+0x2a>

00000204 <__umulhisi3>:
 204:	a2 9f       	mul	r26, r18
 206:	b0 01       	movw	r22, r0
 208:	b3 9f       	mul	r27, r19
 20a:	c0 01       	movw	r24, r0
 20c:	a3 9f       	mul	r26, r19
 20e:	01 d0       	rcall	.+2      	; 0x212 <__umulhisi3+0xe>
 210:	b2 9f       	mul	r27, r18
 212:	70 0d       	add	r23, r0
 214:	81 1d       	adc	r24, r1
 216:	11 24       	eor	r1, r1
 218:	91 1d       	adc	r25, r1
 21a:	08 95       	ret

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
